#!/bin/bash
pacman -Sy
clear
#Particionando o disco#
echo -e 'Particionando o disco:'
echo -e '\n 1=cfdisk \n 2=parted \n'
read -p "Qual particionador deseja utilizar ? = " particionador
if [ $particionador == 1 ]
then
	cfdisk  
elif [ $particionador == 2 ] 
then
	parted  
fi
#Particionando o disco#
clear
#Formatando as partições#
while [ $saida: != sair ]
do
	clear
	fdisk -l
	echo -e "\n"
    echo -e "Formatando as partições:"
	read -p "Selecione sua partição = " particao
    clear
	echo -e "\nEsquema de formatação de discos"
	echo -e "\n 1=Ext4 \n 2=Ext3 \n 3=Ext2 \n 4=Swap\n 5=Fat32 \n"
	read -p "Insira um número = " formato
			if [ $formato == 1 ]
			then
				mkfs.ext4 $particao
			elif [ $formato == 2 ]
			then 			
				mkfs.ext3 $particao
			elif [ $formato == 3 ]
			then 
				mkfs.ext2 $particao
			elif [ $formato == 4 ]
			then
				mkswap $particao
				swapon $particao
            elif [ $formato == 5 ]
            then
                mkfs.fat -F32 $particao
			fi
	clear
	echo -e "\nPressione 'Enter' para continuar o particionamento ou digite 'sair' quando terminar de configurar todas as partições\n "
	read -p "= " saida
		if [ $saida == sair ]
		then
			break
		fi
done
#Formatando as partições#
clear
#Configurando partições#
fdisk -l | grep dev
echo -e "\n 1=/dev/sda1 \n 2=/dev/sda2 \n 3=/dev/sda3 \n 4=/dev/sda4 \n 5=/dev/sda5 \n 6=/dev/sda6 \n 7=/dev/sda7 \n 8=/dev/sda8 \n 9=/dev/sda9 \n 10=/dev/sda10 \n "
read -p "Qual partição você deseja utilizar como /root ? = " particao_root
        if [ $particao_root == 1 ]
        then
                mount /dev/sda1 /mnt/
        elif [ $particao_root == 2 ]
        then
                mount /dev/sda2 /mnt/
        elif [ $particao_root == 3 ]
        then
                mount /dev/sda3 /mnt/
        elif [ $particao_root == 4 ]
        then
                mount /dev/sda4 /mnt/
        elif [ $particao_root == 5 ]
        then
                mount /dev/sda5 /mnt/
        elif [ $particao_root == 6 ]
        then
                mount /dev/sda6 /mnt/
        elif [ $particao_root == 7 ]
        then
                mount /dev/sda7 /mnt/
        elif [ $particao_root == 8 ]
        then
                mount /dev/sda8 /mnt/
        elif [ $particao_root == 9 ]
        then
                mount /dev/sda9 /mnt/
        elif [ $particao_root == 10 ]
        then
                mount /dev/sda10 /mnt/
		fi
mkdir /mnt/home
mkdir /mnt/boot
mkdir /mnt/boot/efi
clear
fdisk -l
echo -e "\n"
read -p "Deseja montar a partição /home ? s/n = " criar_home
if [ $criar_home == s ]
then
    echo -e "\n 1=/dev/sda1 \n 2=/dev/sda2 \n 3=/dev/sda3 \n 4=/dev/sda4 \n 5=/dev/sda5 \n 6=/dev/sda6 \n 7=/dev/sda7 \n 8=/dev/sda8 \n 9=/dev/sda9 \n 10=/dev/sda10 \n "        
    read -p "Qual partição você deseja utilizar como /home ? = " particao_home
    if [ $particao_home == 1 ]
    then
            mount /dev/sda1 /mnt/home
    elif [ $particao_home == 2 ]
    then
            mount /dev/sda2 /mnt/home
    elif [ $particao_home == 3 ]
    then
            mount /dev/sda3 /mnt/home
    elif [ $particao_home == 4 ]
    then
            mount /dev/sda4 /mnt/home
    elif [ $particao_home == 5 ]
    then
            mount /dev/sda5 /mnt/home
    elif [ $particao_home == 6 ]
    then
            mount /dev/sda6 /mnt/home
    elif [ $particao_home == 7 ]
    then
            mount /dev/sda7 /mnt/home
    elif [ $particao_home == 8 ]
    then
            mount /dev/sda8 /mnt/home
    elif [ $particao_home == 9 ]
    then
            mount /dev/sda9 /mnt/home
    elif [ $particao_home == 10 ]
    then
            mount /dev/sda10 /mnt/home
    fi
fi
clear
fdisk -l
echo -e "\n"
read -p "Deseja montar a partição /boot ? s/n = " criar_boot
if [ $criar_boot == s ]
then
    echo -e "\n 1=/dev/sda1 \n 2=/dev/sda2 \n 3=/dev/sda3 \n 4=/dev/sda4 \n 5=/dev/sda5 \n 6=/dev/sda6 \n 7=/dev/sda7 \n 8=/dev/sda8 \n 9=/dev/sda9 \n 10=/dev/sda10 \n "        
    read -p "Qual partição você deseja utilizar como /boot ? = " particao_boot
    if [ $particao_boot == 1 ]
    then
            mount /dev/sda1 /mnt/boot
    elif [ $particao_boot == 2 ]
    then
            mount /dev/sda2 /mnt/boot
    elif [ $particao_boot == 3 ]
    then
            mount /dev/sda3 /mnt/boot
    elif [ $particao_boot == 4 ]
    then
            mount /dev/sda4 /mnt/boot
    elif [ $particao_boot == 5 ]
    then
            mount /dev/sda5 /mnt/boot
    elif [ $particao_boot == 6 ]
    then
            mount /dev/sda6 /mnt/boot
    elif [ $particao_boot == 7 ]
    then
            mount /dev/sda7 /mnt/boot
    elif [ $particao_boot == 8 ]
    then
            mount /dev/sda8 /mnt/boot
    elif [ $particao_boot == 9 ]
    then
            mount /dev/sda9 /mnt/boot
    elif [ $particao_boot == 10 ]
    then
            mount /dev/sda10 /mnt/boot
    fi
fi
clear
fdisk -l
echo -e "\n"
read -p "Deseja criar a partição /boot/efi ? s/n = " criar_efi
if [ $criar_efi == s ]
then
    echo -e "\n 1=/dev/sda1 \n 2=/dev/sda2 \n 3=/dev/sda3 \n 4=/dev/sda4 \n 5=/dev/sda5 \n 6=/dev/sda6 \n 7=/dev/sda7 \n 8=/dev/sda8 \n 9=/dev/sda9 \n 10=/dev/sda10 \n "        
    read -p "Qual partição você deseja utilizar como /boot/efi ? = " particao_efi
    if [ $particao_efi == 1 ]
    then
            mount /dev/sda1 /mnt/boot/efi
    elif [ $particao_efi == 2 ]
    then
            mount /dev/sda2 /mnt/boot/efi
    elif [ $particao_efi == 3 ]
    then
            mount /dev/sda3 /mnt/boot/efi
    elif [ $particao_efi == 4 ]
    then
            mount /dev/sda4 /mnt/boot/efi
    elif [ $particao_efi == 5 ]
    then
            mount /dev/sda5 /mnt/boot/efi
    elif [ $particao_efi == 6 ]
    then
            mount /dev/sda6 /mnt/boot/efi
    elif [ $particao_efi == 7 ]
    then
            mount /dev/sda7 /mnt/boot/efi
    elif [ $particao_efi == 8 ]
    then
            mount /dev/sda8 /mnt/boot/efi
    elif [ $particao_efi == 9 ]
    then
            mount /dev/sda9 /mnt/boot/efi
    elif [ $particao_efi == 10 ]
    then
            mount /dev/sda10 /mnt/boot/efi
    fi
fi
#Configurando partições#
clear
#Instalando o sistema base e o kernel#
echo -e 'Instalando o sistema base e o kernel: \n'
echo -e "\nQual kernel deseja instalar ? \n\n 1=Linux \n 2=Linux-lts \n 3=Linux-hardened \n"
read -p "> " kernel_sistema
if [ $kernel_sistema == 1 ]
then
	pacstrap /mnt nano base base-devel linux linux-firmware
elif [ $kernel_sistema == 2 ]
then
	pacstrap /mnt nano base base-devel linux-lts linux-firmware
elif [ $kernel_sistema == 3 ]
then
	pacstrap /mnt nano base base-devel linux-hardened linux-firmware
fi
#Instalando o sistema base e o kernel#

#Configurando o Fstab#
genfstab -U /mnt >> /mnt/etc/fstab
#Configurando o Fstab#

#Configurando idioma#
echo 'LANG=pt_BR.UTF-8' > /mnt/etc/locale.conf
echo 'pt_BR.UTF-8 UTF-8' >> /mnt/etc/locale.gen
arch-chroot /mnt/ locale-gen
#Configurando idioma#
arch-chroot /mnt/ mkinitcpio -P
clear
#Definindo a senha do root#
echo -e 'Definindo senha do root: \n'
arch-chroot /mnt/ passwd root
#Definindo a senha do root#
clear
#Criando usuario#
echo -e 'Criando usuário: \n'
echo -e 'Digite o nome do seu usuário: '
read -p "> " usuario
arch-chroot /mnt/ useradd --badnames -m -g users $usuario 
arch-chroot /mnt/ passwd $usuario
mkdir /mnt/home/$usuario/Downloads
mkdir /mnt/home/$usuario/Documentos
mkdir /mnt/home/$usuario/Imagens
mkdir /mnt/home/$usuario/Videos
mkdir /mnt/home/$usuario/Scripts
mkdir /mnt/home/$usuario/.icons
mkdir /mnt/home/$usuario/.themes
nano /mnt/etc/sudoers
#Criando usuario#
clear
#Nome da maquina#
nano /mnt/etc/hostname
#Nome da maquina#
clear
#Bootloader
echo -e "Qual modo deseja instalar? \n\n 1=UEFI-GPT \n 2=BIOS(Legacy)-MBR \n"
read -p "> " bios
if [ $bios == 1 ]
then
    arch-chroot /mnt/ pacman -S grub os-prober efibootmgr --noconfirm
    arch-chroot /mnt/ grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
    arch-chroot /mnt/ os-prober
    arch-chroot /mnt/ grub-mkconfig -o /boot/grub/grub.cfg
    arch-chroot /mnt/ mkdir /boot/efi/EFI/boot
    arch-chroot /mnt/ cp /boot/efi/EFI/GRUB/grubx64.efi /boot/efi/EFI/BOOT/BOOTX64.EFI
elif [ $bios == 2 ]
then
    arch-chroot /mnt/ pacman -S grub os-prober  --noconfirm
    arch-chroot /mnt/ grub-install --target=i386-pc /dev/sda
    arch-chroot /mnt/ os-prober
    arch-chroot /mnt/ grub-mkconfig -o /boot/grub/grub.cfg
fi
#Bootloader

#Wireless#
arch-chroot /mnt/ pacman -S networkmanager network-manager-applet wireless_tools wpa_supplicant dhcp dhcpcd --noconfirm
arch-chroot /mnt/ systemctl enable dhcpcd
arch-chroot /mnt/ systemctl enable NetworkManager
#Wireless#
#XORG,SOM,VIDEO,ARQUIVOS E CODECS#
arch-chroot /mnt/ pacman -S xorg-xinit xorg-twm xterm xorg-xclock xorg-server xorg-apps xf86-input-synaptics xarchiver arj p7zip sharutils unrar mlocate lzip unzip pulseaudio pulseaudio-alsa pavucontrol alsa-firmware alsa-utils a52dec faac faad2 flac jasper lame libdca libdv libmad libmpeg2 libtheora libvorbis libxv wavpack x264 xvidcore gstreamer gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav gvfs gvfs-afc gvfs-mtp gvfs-smb ntfs-3g --noconfirm
#XORG,SOM,VIDEO,ARQUIVOS E CODECS#
clear
nano /mnt/etc/pacman.conf
arch-chroot /mnt/ pacman -Sy
#Instalando driver de video#
echo -e "\n Selecione o driver de video correspondente à sua maquina: \n\n 1=AMD \n 2=Intel \n 3=Nvidia \n 4=Genérico \n 5=ATI \n" 
read -p "> " driver_video 
if [ $driver_video == 1 ] 
then
	arch-chroot /mnt/ pacman -S xf86-video-amdgpu --noconfirm
	arch-chroot /mnt/ pacman -S mesa --noconfirm
	arch-chroot /mnt/ pacman -S lib32-mesa --noconfirm
elif [ $driver_video == 2 ] 
then
	arch-chroot /mnt/ pacman -S xf86-video-intel --noconfirm
	arch-chroot /mnt/ pacman -S mesa --noconfirm
	arch-chroot /mnt/ pacman -S lib32-mesa --noconfirm
elif [ $driver_video == 3 ] 
then
	arch-chroot /mnt/ pacman -S xf86-video-nouveau --noconfirm
	arch-chroot /mnt/ pacman -S nvidia --noconfirm
	arch-chroot /mnt/ pacman -S nvidia-utils --noconfirm
elif [ $driver_video == 4 ] 
then
	arch-chroot /mnt/ pacman -S xf86-video-fbdev --noconfirm
	arch-chroot /mnt/ pacman -S xf86-video-vesa --noconfirm
elif [ $driver_video == 5 ]
then
	arch-chroot /mnt/ pacman -S xf86-video-ati --noconfirm
	arch-chroot /mnt/ pacman -S mesa --noconfirm
	arch-chroot /mnt/ pacman -S lib32-mesa --noconfirm
fi 
#Instalando driver de video#
clear
#Instalando a interface gráfica#
echo -e "\n Selecione uma interface gráfica: \n\n 1=Budgie \n 2=Cinnamon \n 3=Deepin \n 4=Enlightenment \n 5=Gnome \n 6=Kde Plasma \n 7=Lxde \n 8=Lxqt \n 9=Mate \n 10=Xfce \n" 
read -p "> " interface 
if [ $interface == 1 ] 
then
	arch-chroot /mnt/ pacman -S budgie-desktop --noconfirm
elif [ $interface == 2 ] 
then
	arch-chroot /mnt/ pacman -S cinnamon --noconfirm
	arch-chroot /mnt/ pacman -S nemo-fileroller --noconfirm
elif [ $interface == 3 ]
then
	arch-chroot /mnt/ pacman -S deepin --noconfirm
	arch-chroot /mnt/ pacman -S deepin-extra --noconfirm
elif [ $interface == 4 ] 
then
    arch-chroot /mnt/ pacman -S enlightenment --noconfirm
elif [ $interface == 5 ]
then
    arch-chroot /mnt/ pacman -S gnome --noconfirm
	arch-chroot /mnt/ pacman -S gnome-extra --noconfirm
elif [ $interface == 6 ] 
then
    arch-chroot /mnt/ pacman -S plasma --noconfirm
elif [ $interface == 7 ]
then
	arch-chroot /mnt/ pacman -S lxde --noconfirm
	arch-chroot /mnt/ pacman -S lxde-gtk3 --noconfirm
elif [ $interface == 8 ] 
then
	arch-chroot /mnt/ pacman -S lxqt --noconfirm
elif [ $interface == 9 ] 
then
	arch-chroot /mnt/ pacman -S mate --noconfirm
	arch-chroot /mnt/ pacman -S mate-extra --noconfirm
elif [ $interface == 10 ]
then
	arch-chroot /mnt/ pacman -S xfce4 --noconfirm
	arch-chroot /mnt/ pacman -S xfce4-goodies --noconfirm
fi 
#Instalando a interface gráfica#
clear
#Display Manager#
echo -e "\n Selecione um gerenciador de entrada (Display Manager): \n\n 1=Lightdm \n 2=SDDM \n 3=GDM \n 4=Lxdm \n" 
read -p "> " display 
if [ $display == 1 ]
then
	arch-chroot /mnt/ pacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings --noconfirm
	arch-chroot /mnt/ systemctl enable lightdm
elif [ $display == 2 ]
then
	arch-chroot /mnt/ pacman -S sddm --noconfirm
	arch-chroot /mnt/ systemctl enable sddm
elif [ $display == 3 ]
then
	arch-chroot /mnt/ pacman -S gdm --noconfirm
	arch-chroot /mnt/ systemctl enable gdm
elif [ $display == 4 ]
then
	arch-chroot /mnt/ pacman -S lxdm --noconfirm
	arch-chroot /mnt/ systemctl enable lxdm
fi
#Display Manager#
clear
#Instalando o Bluetooth#
echo -e "\n Deseja instalar os drivers de Bluetooth ? s/n \n"
read -p  "> " bluetooth
if [ $bluetooth == s ]
then
	arch-chroot /mnt/ pacman -S bluez --noconfirm
	arch-chroot /mnt/ pacman -S blueman --noconfirm
	arch-chroot /mnt/ pacman -S bluez-utils --noconfirm
	arch-chroot /mnt/ modprobe btusb
	arch-chroot /mnt/ systemctl enable bluetooth
	arch-chroot /mnt/ systemctl start bluetooth
fi
#Instalando o Bluetooth#
clear
#Instalando os drivers de impressora#
echo -e "\n Deseja instalar os drivers de impressora ? s/n  \n"
read -p "> " impressora
if [ $impressora == s ]
then
	arch-chroot /mnt/ pacman -S cups --noconfirm
	arch-chroot /mnt/ pacman -S hplip --noconfirm
	arch-chroot /mnt/ pacman -S system-config-printer --noconfirm
	arch-chroot /mnt/ pacman -S gtk3-print-backends --noconfirm
	arch-chroot /mnt/ systemctl enable org.cups.cupsd.service
	arch-chroot /mnt/ systemctl start org.cups.cupsd.service
fi
#Instalando os drivers de impressora#
clear
#Instalando um navegador#
echo -e "\n Qual navegador deseja instalar: \n\n 0=Nenhum \n 1=Chromium \n 2=Firefox \n 3=Min \n 4=Opera \n"
read -p "> " navegador
if [ $navegador == 0 ]
then
    echo
elif [ $navegador == 1 ]
then
	arch-chroot /mnt/ pacman -S chromium --noconfirm
elif [ $navegador == 2 ]
then
	arch-chroot /mnt/ pacman -S firefox --noconfirm
    arch-chroot /mnt/ pacman -S firefox-i18n-pt-br --noconfirm
elif [ $navegador == 3 ]
then
    arch-chroot /mnt/ pacman -S min --noconfirm
elif [ $navegador == 4 ]
then
	arch-chroot /mnt/ pacman -S opera --noconfirm
fi
#Instalando um navegador#
clear
#Torrent#
echo -e "\nQual cliente torrent deseja instalar: \n\n 0=Nenhum \n 1=Deluge \n 2=qbittorrent \n 3=transmission \n 4=ktorrent"
read -p "> " cliente_torrent
if [ $cliente_torrent = 0 ]
then
    echo
elif [ $cliente_torrent == 1 ]
then
	arch-chroot /mnt/ pacman -S deluge --noconfirm
	arch-chroot /mnt/ pacman -S deluge-gtk --noconfirm
elif [ $cliente_torrent == 2 ]
then
	arch-chroot /mnt/ pacman -S qbittorrent --noconfirm
elif [ $cliente_torrent == 3 ]
then
    arch-chroot /mnt/ pacman -S transmission-gtk --noconfirm	
elif [ $cliente_torrent == 4 ]
then
	arch-chroot /mnt/ pacman -S ktorrent --noconfirm
fi
#Torrent#
clear
#Pacotes utilitários extras#
echo -e "\nDeseja instalar alguns pacotes extras ? s/n "
read -p "> " utilitarios
if [ $utilitarios == s ]
then
	arch-chroot /mnt/ pacman -S xed git terminator packer fakeroot dnsmasq gparted mtools wget curl htop sudo neofetch man aircrack-ng reaver nmap net-tools fuse2 dnsutils tor clamav firewalld  binutils bash-completion --noconfirm
elif [ $utilitarios == n ]
then
    echo
fi
#Pacotes utilitários extras#
echo -e "Agora reinicie a máquina !! "
